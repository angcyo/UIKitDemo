/**
 * Email:angcyo@126.com
 *
 * 脚本测试环境:
 * com.android.tools.build:gradle:3.5.0
 * gradle-5.4.1-all
 *
 * 要求:
 * 1.正确配置的`java`环境
 * 2.可直接在`命令行(cmd)`运行`dx`命令, `dx`命令配置如下:
 * 请将"{AndroidSDK}\build-tools\{任意版本}\" 路径添加到windows的PATH环境变量中
 *
 * 注意:
 * 如果使用JDK9和以上版本, 出现以下错误:
 *
 * -Djava.ext.dirs=D:\android\sdk\build-tools\29.0.2\lib is not supported.  Use -classpath instead.
 * Error: Could not create the Java Virtual Machine.
 * Error: A fatal exception has occurred. Program will exit.
 *
 * 请参考: https://www.jianshu.com/p/77db2ea8098f
 *
 * @author angcyo* @date 2019/09/06
 * Copyright (c) 2019 ShenZhen O&M Cloud Co., Ltd. All rights reserved.
 */

ext.dexConfig = [

        //需要打包的包名(包含包名下的所有类)
        "includePackageNames": [
                "com/angcyo/uikitdemo/dex"
        ],
        //文件名 (默认是工程名+时间的组合)
        "dexFileName"        : "dex",
        //当前版本
        "versionCode"        : "1",
        "versionName"        : "v1.0.0",

        //内部使用
        "jarPath"            : "",
        "dexPath"            : ""
]


task _makeDex() {
    dependsOn("jarToDex")

    doFirst {
        println "开始打包dex文件:$dexConfig.includePackageNames"
    }

    doLast {
        println "打包完成:$dexConfig.dexPath"
    }
}


/**
 * 这里的依赖任务`compileApkReleaseJavaWithJavac`请根据"compile(.*)JavaWithJavac"匹配规则
 * 找到自己工程对应任务名.
 *
 * 此任务执行后, 才会生成kotlin语言对应的 .class 文件.
 * */
task makeJar(dependsOn: ['compileApkReleaseJavaWithJavac'], type: Jar) {

    //需要打包进jar的包名(此包名下的所有class)
    def includePackageNames = dexConfig.includePackageNames

    //编译类型 风味类型
    def buildFlavors = "apkRelease"
    def buildDir = project.buildDir.getAbsolutePath()

    def javaClassPath = "$buildDir/intermediates/javac/$buildFlavors/classes"
    def kotlinClassPath = "$buildDir/tmp/kotlin-classes/$buildFlavors"

    //jar 输出目录
    destinationDirectory.set(rootProject.file("dex"))

    //名字规则
    //[archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    //jar 文件名

    if (dexConfig.dexFileName.isEmpty()) {
        archiveBaseName.set(project.name)
        def time = new Date().format("yyyy-MM-dd_HH-mm", TimeZone.getTimeZone("Asia/Shanghai"))
        archiveAppendix.set(time)
    } else {
        archiveBaseName.set(dexConfig.dexFileName)
    }

    archiveVersion.set(dexConfig.versionName)
    archiveExtension.set("jar")

    //archiveClassifier.set("all")

    //复制文件的源路径
    from kotlinClassPath, javaClassPath
    //需要匹配的规则, 如果未设置, 则全部复制
    //include javaClassPath, kotlinClassPath

    //需要匹配的规则, 如果未设置, 则全部不排除
    //exclude

    include { fileTree ->
        includePackageNames.any {
            it.startsWith(fileTree.path)
        } || includePackageNames.any {
            fileTree.path.startsWith(it)
        }
    }

    //写入jar文件中的 META-INF/MANIFEST.MF 文件的信息
    manifest {
        attributes["Build-Time"] = new Date().format("yyyy-MM-dd_HH-mm-ss", TimeZone.getTimeZone("Asia/Shanghai"))
        attributes["Author"] = "angcyo"
        attributes["Copyright"] = "Wayto"
        attributes["versionName"] = dexConfig.versionName
        attributes["versionCode"] = dexConfig.versionCode
    }

    dexConfig.jarPath = archiveFile.get().getAsFile().getAbsolutePath()
}

task jarToDex(dependsOn: ['makeJar'], type: Exec) {
    //借助windows的cmd命令行执行
    commandLine 'cmd'

    doFirst {
        //jar文件对象
        def srcFile = file(dexConfig.jarPath)
        //需要生成的dex文件对象
        def desFile = file(srcFile.parent + "/" + srcFile.name.substring(0, srcFile.name.lastIndexOf(".")) + ".dex")

        dexConfig.dexPath = desFile.getAbsolutePath()

        //此行可以不需要
        workingDir srcFile.parent

        //拼接dx.bat执行的参数
        def list = []
        list.add("/c")
        list.add("dx")
        list.add("--dex")
        list.add("--output")
        list.add(desFile)
        list.add(dexConfig.jarPath)

        //设置参数到cmd命令行
        args list
    }
}
